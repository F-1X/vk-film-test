// Code generated by MockGen. DO NOT EDIT.
// Source: database/database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"
	time "time"
	model "vk/model"

	gomock "github.com/golang/mock/gomock"
)

// MockDBRepository is a mock of DBRepository interface.
type MockDBRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepositoryMockRecorder
}

// MockDBRepositoryMockRecorder is the mock recorder for MockDBRepository.
type MockDBRepositoryMockRecorder struct {
	mock *MockDBRepository
}

// NewMockDBRepository creates a new mock instance.
func NewMockDBRepository(ctrl *gomock.Controller) *MockDBRepository {
	mock := &MockDBRepository{ctrl: ctrl}
	mock.recorder = &MockDBRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepository) EXPECT() *MockDBRepositoryMockRecorder {
	return m.recorder
}

// CreateFilm mocks base method.
func (m *MockDBRepository) CreateFilm(req model.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockDBRepositoryMockRecorder) CreateFilm(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockDBRepository)(nil).CreateFilm), req)
}

// CreateSession mocks base method.
func (m *MockDBRepository) CreateSession(username, token, role string, createdAt, expiresAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", username, token, role, createdAt, expiresAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockDBRepositoryMockRecorder) CreateSession(username, token, role, createdAt, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockDBRepository)(nil).CreateSession), username, token, role, createdAt, expiresAt)
}

// DeleteFilm mocks base method.
func (m *MockDBRepository) DeleteFilm(req model.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockDBRepositoryMockRecorder) DeleteFilm(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockDBRepository)(nil).DeleteFilm), req)
}

// DeleteSession mocks base method.
func (m *MockDBRepository) DeleteSession(sessionToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", sessionToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockDBRepositoryMockRecorder) DeleteSession(sessionToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockDBRepository)(nil).DeleteSession), sessionToken)
}

// GetActor mocks base method.
func (m *MockDBRepository) GetActor(req model.Actor) (*model.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", req)
	ret0, _ := ret[0].(*model.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockDBRepositoryMockRecorder) GetActor(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockDBRepository)(nil).GetActor), req)
}

// GetFilm mocks base method.
func (m *MockDBRepository) GetFilm(req model.Film) (*model.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilm", req)
	ret0, _ := ret[0].(*model.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockDBRepositoryMockRecorder) GetFilm(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockDBRepository)(nil).GetFilm), req)
}

// GetFilms mocks base method.
func (m *MockDBRepository) GetFilms(req model.Film) []model.Film {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", req)
	ret0, _ := ret[0].([]model.Film)
	return ret0
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockDBRepositoryMockRecorder) GetFilms(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockDBRepository)(nil).GetFilms), req)
}

// GetSessionByUsername mocks base method.
func (m *MockDBRepository) GetSessionByUsername(username string) (*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByUsername", username)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByUsername indicates an expected call of GetSessionByUsername.
func (mr *MockDBRepositoryMockRecorder) GetSessionByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByUsername", reflect.TypeOf((*MockDBRepository)(nil).GetSessionByUsername), username)
}

// PostActor mocks base method.
func (m *MockDBRepository) PostActor(req model.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostActor", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostActor indicates an expected call of PostActor.
func (mr *MockDBRepositoryMockRecorder) PostActor(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostActor", reflect.TypeOf((*MockDBRepository)(nil).PostActor), req)
}

// SignUp mocks base method.
func (m *MockDBRepository) SignUp(req model.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockDBRepositoryMockRecorder) SignUp(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockDBRepository)(nil).SignUp), req)
}

// SignUpAdministrator mocks base method.
func (m *MockDBRepository) SignUpAdministrator(req model.Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUpAdministrator", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUpAdministrator indicates an expected call of SignUpAdministrator.
func (mr *MockDBRepositoryMockRecorder) SignUpAdministrator(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUpAdministrator", reflect.TypeOf((*MockDBRepository)(nil).SignUpAdministrator), req)
}

// UpdateActor mocks base method.
func (m *MockDBRepository) UpdateActor(req model.ActorUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockDBRepositoryMockRecorder) UpdateActor(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockDBRepository)(nil).UpdateActor), req)
}

// UserExist mocks base method.
func (m *MockDBRepository) UserExist(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExist", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExist indicates an expected call of UserExist.
func (mr *MockDBRepositoryMockRecorder) UserExist(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExist", reflect.TypeOf((*MockDBRepository)(nil).UserExist), username)
}
